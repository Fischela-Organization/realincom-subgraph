type DigiSale @entity {
  id: ID!
  auctionId: ID
  digi: Digi!
  # isOnSale: Boolean #set isOnsale = true when OfferCreated, AuctionCreated is emitted, and isOnSale = false when OfferCancelled, OfferPurchased, AuctionCancelled, AuctionPurchased, AuctionResulted is called
  amount: BigInt #can be reserved_price for auction or price for fixed
  isOnSale: Boolean
  startTime: BigInt
  endTime: BigInt
  duration: BigInt
  buyer: User
  auctionResulted: Boolean
  intergrityConfirmed: Boolean
  seller: User
}

type Dispute @entity {
  id: ID!
  payee: User
  disputeReporter: User
  auctionId: ID
  message: String
  email: String
  phone: String
  fundReceiver: User
  payment: BigInt
  disputeId: String
}

type Digi @entity {
  id: ID!
  metadataURI: String!
  baseURI: String
  created: BigInt
  isOnSale: Boolean
  ownerAddress: User!
  creator: User!
  title: String
  description: String
  worth: BigInt
  productAge: BigInt
  monthlyExpenses: BigInt
  monthlyRevenue: BigInt
  monthlyTraffic: BigInt
  location: String
  productLink: String
}

type Loan @entity {
  id: ID!
  amountSupplied: BigInt
  interestRate: BigInt
  loanDuration: BigInt
  toBePaidMonthly: BigInt
  borrowedLoans: [Borrowed!] @derivedFrom(field: "loan")
  roi: BigInt
  lender: User!
  isActive: Boolean
  loanId: BigInt
}

type Borrowed @entity {
  id: ID!
  amountBorrowed: BigInt
  interestRate: BigInt
  loanDuration: BigInt
  monthlyRemittance: BigInt
  isApproved: Boolean
  lender: User
  borrower: User
  loanId: BigInt
  loan: Loan
  borrowerId: BigInt
  nftCollateralId: Digi
}

type User @entity {
  id: ID!
  networth: BigInt
  digis: [Digi!] @derivedFrom(field: "ownerAddress")
  disputes: [Dispute!] @derivedFrom(field: "disputeReporter")
  created: [Digi!] @derivedFrom(field: "creator")
  createdLoans: [Loan!] @derivedFrom(field: "lender")
  borrowedLoans: [Borrowed!] @derivedFrom(field: "borrower")
}
